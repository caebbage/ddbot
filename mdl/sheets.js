module.exports = async (client) => {
  const { GoogleSpreadsheet } = require('google-spreadsheet');
  const { JWT } = require('google-auth-library');

  // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  // bot configuration sheet & data refresh functions
  client.data = new GoogleSpreadsheet('1JL1pbEePQltqzTDVR-HaT5sKGUK_g7X6PbZmj-LorZw', serviceAccountAuth);

  client.refreshData = async function () {
    await client.data.loadInfo();
    client.config = (await client.data.sheetsById[0].getRows())[0];
    client.statuses = await client.data.sheetsById[client.config.get("statuses")]?.getRows() || client.statuses;
    client.pools = await client.data.sheetsById[client.config.get("pools")]?.getRows() || client.pools;
    client.paths = await client.data.sheetsById[client.config.get("paths")]?.getRows() || client.paths;

    console.log("Config, statuses, pools, paths, refreshed.")
  }

  await client.refreshData();


  client.db = { src: new GoogleSpreadsheet('1JeXEb5R7MuF8IsnKfTNd5E5nMf3gwU93iVENB5M41-8', serviceAccountAuth), };
  await client.db.src.loadInfo();

  // function for setup of data fetching/retrieval for each sheet
  async function sheetSetup(id, rows) {
    await client.db.src.sheetsById[id].loadHeaderRow(rows)

    return {
      src: async () => await client.db.src.sheetsById[id].getRows(),
      async find(func) {
        return (await this.src()).find(func);
      },
      async filter(func) {
        return (await this.src()).filter(func);
      },
      async map(func) {
        return (await this.src()).map(func);
      },
      async set(row, key, val) {
        row._rawData = row._rawData.map(val => {
          if (/^\d+\/\d+$/m.test(val)) {
            return +/\d+(?=\/\d+)/.exec(val)[0]
          }
        })
        row.set(key, val);
        try {
          await row.save();
          return true;
        } catch (err) {
          console.log(err);
          return false;
        }
      }
    }
  }

  client.db.charas = await sheetSetup(0, 4);
  client.db.npcs = await sheetSetup('382892795', 3);
  client.db.chart = await sheetSetup('902346809', 3);
  client.db.reactroles = await (async function (sheetId) {
    let res = {
      sheet: client.data.sheetsById[sheetId],
      async reload() {
        this.data = await this.sheet?.getRows() ?? this.data
        for (let row of this.data.filter(row => row.get("message_id"))) {
          await (await client.channels.fetch(row.get("message_channel"))).messages.fetch(row.get("message_id"))
        }
      },
      data: [],
      find(...args) {
        return this.data.find(...args)
      },
      filter(...args) {
        return this.data.filter(...args)
      },
      map(...args) {
        return this.data.map(...args)
      },
      toObjects() { return this.data.map(x => x.toObject()) }
    }
    await res.reload();

    return res
  })(client.config.get("reactroles"));
}